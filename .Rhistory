)
# Querien und in df laden
df <- dbGetQuery(con,
paste(" SELECT tbl_comm.listing_id,
date_format(tbl_comm.datetime, '%Y-%m-%d') AS dateymd,
tbl_comm.num_messages,
IFNULL(tbl_inquiry.category,'Rückfrage') AS category,
tbl_rlh.binding_inquiry,
tbl_comm.text
FROM (
SELECT  c.listing_id,
c.datetime,
tbl.num_messages,
h.text
FROM communication.ws_communication AS c
JOIN communication.ws_history AS h ON c.id = h.communication_id
AND date_format(c.datetime, '%Y-%m-01') BETWEEN '2018-03-01' AND '2018-09-13'
JOIN (
SELECT  MIN(h.id) AS id,
COUNT(h.id) AS num_messages
FROM communication.ws_communication AS c
JOIN communication.ws_history AS h ON c.id = h.communication_id
AND date_format(c.datetime, '%Y-%m-01') BETWEEN '2018-03-01' AND '2018-09-13'
GROUP BY c.listing_id,h.communication_id) AS tbl
ON h.id = tbl.id
) AS tbl_comm
LEFT JOIN (
SELECT listing_id,
created_date,
category
FROM data_service.raw__inquiry
) AS tbl_inquiry
ON tbl_comm.listing_id = tbl_inquiry.listing_id AND date_format(tbl_comm.datetime, '%Y-%m-%d') = tbl_inquiry.created_date
LEFT JOIN (
SELECT  listing_id,
date_from,
date_to,
binding_inquiry
FROM data_service.raw__listing__history
) AS tbl_rlh
ON tbl_comm.listing_id = tbl_rlh.listing_id AND date_format(tbl_comm.datetime, '%Y-%m-%d') BETWEEN tbl_rlh.date_from AND date_format(IFNULL(tbl_rlh.date_to,NOW()), '%Y-%m-%d')
WHERE tbl_rlh.binding_inquiry = 'inactive'
;"))
# Verbindung trennen
dbDisconnect(con)
# Speichern
fwrite(df,"/Users/sventhies/filestorage/analytics_general_inquiry_classification/data_rare_non_binding.csv")
library(data.table)
data_rare <- fread(df,"/Users/sventhies/filestorage/analytics_general_inquiry_classification/data_rare_non_binding.csv")
data_rare <- fread("/Users/sventhies/filestorage/analytics_general_inquiry_classification/data_rare_non_binding.csv")
data_Anfrage <- data %>%
filter(label == 'Rückfrage') %>%
mutate(text_has_date = grepl("DATUM",text),
text_has_booking_keyword = grepl("buchen|mieten",text),
text_has_price_request = grepl("teuer|preis",text))
# Required packages
require(data.table)
require(tidyverse)
require(cld3)
# Laden
data <- fread("/Users/sventhies/filestorage/analytics_general_inquiry_classification/data_rare_non_binding.csv")
# Replace datapoints with automatically generated text
data2 <- data %>%
filter(text != "Der Urlaubsgast hat keine Nachricht verfasst.",
text != "BOOKED",
text != "DECLINED",
text != "EXPIRED",
text != "CANCELED",
text != "Test Text",
text != "Test",
text != "test",
text != "Test Buchung",
text != "xxx",
text != ":)",
text != "")
# Replace Category by label
data3 <- data2 %>%
mutate(label = ifelse(category == "Rückfrage","Rückfrage","Anfrage")) %>%
select(label, text)
# Remove Umbrüche, e.g. \n\r
data4 <- data3 %>%
mutate(text = gsub("[\n\r]", " " , text))
# Remove all signs
data5 <- data4 %>%
mutate(text = gsub("[[:punct:]]", "" , text))
# Remove observations with any "test"
data6 <- filter(data5, !grepl("test",text))
# Only german texts
language_detection <- detect_language(data6$text)
data7 <- data6[ifelse(is.na(language_detection=="de"),FALSE,TRUE),]
# Remove all double or tripple spaces to only one
data8 <- data7 %>%
mutate(text = gsub("\\s+", " ", str_trim(text)))
# Add structure to the data by abstraction
dogs <- read.csv("/Users/sventhies/filestorage/analytics_general_inquiry_classification/dogs.csv")
data9 <- data8 %>%
mutate(text = gsub("01[0-9]{9,11}", "HANDYNUMMER" , text),
text = gsub("[0-9]{4,8}", "DATUM" , text),
text = gsub("[0-9]{1,3}", "ZAHL" , text),
text = gsub(paste(dogs$dogs, collapse = "|") , "HUND" , text),
text = gsub(paste(c("o g","og","oben genannt","obengenannt","oben genannten","oben","oben angegeben","obenangegeben","oben angegebenen","obenangegebenen"),collapse = "|") , "og" , text))
# Speichern
fwrite(data9,"/Users/sventhies/filestorage/analytics_general_inquiry_classification/data_transformed_non_binding.csv")
library(data.table)
data <- fread("/Users/sventhies/filestorage/analytics_general_inquiry_classification/data_transformed_non_binding.csv")
data_Anfrage <- data %>%
filter(label == 'Rückfrage') %>%
mutate(text_has_date = grepl("DATUM",text),
text_has_booking_keyword = grepl("buchen|mieten",text),
text_has_price_request = grepl("teuer|preis",text))
View(data_Anfrage)
data_Anfrage %>%
group_by(ifelse(text_has_date==TRUE & text_has_booking_keyword==TRUE,TRUE,FALSE)) %>%
summarize(n = n())
data_Anfrage %>%
group_by(ifelse(text_has_date==TRUE,TRUE,FALSE)) %>%
summarize(n = n())
18336/(13433+18336)
3954 / (27815+3954)
data_Anfrage <- data %>%
filter(label == 'Rückfrage') %>%
mutate(text_has_date = grepl("DATUM",text),
text_has_booking_keyword = grepl("buchen|mieten",text),
text_has_price_request = grepl("teuer|preis",text),
text_has_handynr = grepl("HANDYNUMMER",text),)
data_Anfrage <- data %>%
filter(label == 'Rückfrage') %>%
mutate(text_has_date = grepl("DATUM",text),
text_has_booking_keyword = grepl("buchen|mieten",text),
text_has_price_request = grepl("teuer|preis",text),
text_has_handynr = grepl("HANDYNUMMER",text))
data_Anfrage %>%
group_by(ifelse(text_has_handynr==TRUE,TRUE,FALSE)) %>%
summarize(n = n())
1310/(1310+30459)
help(xgboost)
library(xgboost)
library(xgboost)
help(xgboost)
help(xgboost)
help("xgb.DMatrix")
library(mosaic)
data(Alchol)
data(Alcohol)
View(Alcohol)
data <- read.csv("/Users/sventhies/OneDrive - Traum-Ferienwohnungen GmbH/Privat/Sven/FOM/R-Training/Daten_Allbus/allbus.csv")
View(data)
data <- read.csv2("/Users/sventhies/OneDrive - Traum-Ferienwohnungen GmbH/Privat/Sven/FOM/R-Training/Daten_Allbus/allbus.csv")
View(data)
setwd("/Users/sventhies/OneDrive - Traum-Ferienwohnungen GmbH/Privat/Sven/FOM/R-Training")
data <- read.csv2("/Daten_Allbus/allbus.csv")
data <- read.csv2("Daten_Allbus/allbus.csv")
data_subset <- data %>%
select(respid,
yborn,
age,
ep03,
ep04)
View(data_subset)
library(mosaic)
inspect(data_subset)
data_subset_clean <- data_subset %>%
filter(!is.na(yborn),
!is.na(age),
!is.na(ep03),
!is.na(ep04))
data_subset_clean2 <- data_subset %>%
filter(all_vars(is.na(.)))
help(filter)
data_subset_clean2 <- data_subset %>%
filter_all(any_vars(is.na(.)))
data_subset_clean <- data_subset %>%
filter(!is.na(yborn),
!is.na(age),
!is.na(ep03),
!is.na(ep04))
data_subset_clean2 <- data_subset %>%
filter_all(!any_vars(is.na(.)))
data_subset_clean2 <- data_subset %>%
filter_all(any_vars(!is.na(.)))
View(data_subset_clean)
inspect(data_subset)
inspect(data_subset_clean)
# Laden der Umgebung
library(mosaic)
# 1. Datensatz downloaden
download.file("https://goo.gl/whKjnl", destfile = "tips.csv")
# 2. Datensatz einlesen
tips <- read.csv2("tips.csv")
# 3. Manipulation von Daten
# -> Nur interessierende Variablen
tips <- tips %>%
select(total_bill, tip, sex)
inspect(tips)
histogram(~ total_bill, data = tips)
histogram(~ tip, data = tips)
xyplot(tip ~ total_bill, data = tips)
bargraph(~ sex, data = tips)
histogram(~ total_bill | sex, data = tips)
histogram(~ tip | sex, data = tips)
bwplot(tip ~ sex, data = tips)
help(bwplot)
t.test(~ total_bill | sex, data = tips)
t.test(~ tip | sex, data = tips)
reg_res <- lm(tip ~ total_bill, data = tips)
summary(reg_res)
plotModel(reg_res)
help("cor.test")
cor.test(tip ~ total_bill, data = tips)
reg_res3 <- lm(tip ~ total_bill + sex, data = tips)
summary(reg_res3)
plotModel(reg_res3)
reg_res3 <- lm(tip ~ total_bill + sex + total_bill:sex, data = tips)
summary(reg_res3)
plotModel(reg_res3)
summary(reg_res3)
t.test(~ total_bill | sex, data = tips)
t.test(~ total_bill | sex, data = tips)
t.test(~ tip | sex, data = tips)
cor.test(tip ~ total_bill, data = tips)
reg_res <- lm(tip ~ total_bill, data = tips)
summary(reg_res)
plotModel(reg_res)
1 + 1
gedaechtnis <- 1+1
gedaechtnis
gedaechtnis2 <- 5/2
gedaechtnis2 <- 5/15
gedaechtnis2 <- 5/2
gedaechtnis3 <- 5/2
gedaechtnis3 <- 5/15
setwd("~/OneDrive - Traum-Ferienwohnungen GmbH/Privat/Sven/FOM/R-Training")
read.csv2("Daten_Allbus/Allbus.csv")
data <- read.csv2("Daten_Allbus/Allbus.csv")
setwd("~/OneDrive - Traum-Ferienwohnungen GmbH/Privat/Sven/FOM/R-Training")
View(data)
library(readr)
Dataset2123 <- read_delim("~/OneDrive - Traum-Ferienwohnungen GmbH/Privat/Sven/FOM/R-Training/Daten_Allbus/allbus.csv",
";", escape_double = FALSE, trim_ws = TRUE)
View(Dataset2123)
data_nicht_schoen <- data %>%
mutate(respid = as.character(respid))
library(dplyr)
data_nicht_schoen <- data %>%
mutate(respid = as.character(respid))
View(data)
View(data_nicht_schoen)
rm(data_nicht_schoen, Dataset2123)
install.packages("Mosaic")
install.packages("mosaic")
library(mosaic)
help("mosaic")
data(Alcohol)
View(Alcohol)
help(Alcohol)
View(data)
Alcohol %>% filter(country == "Germany")
Alcohol %>% filter(country == "Germany") %>% select(country,year,alcohol)
Alcohol.Germany <- Alcohol %>% filter(country == "Germany") %>% select(country,year,alcohol)
View(Alcohol.Germany)
Alcohol.2005 <- Alcohol %>% filter(year == "2005")
View(Alcohol.2005)
View(Alcohol.2005)
Alcohol.2005 <- Alcohol %>%
filter(year == '2005')
Alcohol.2005 <- Alcohol %>%
filter(year == '2005')
Alcohol.2005.sorted <- Alcohol.2005 %>%
arrange(alcohol)
View(Alcohol.2005.sorted)
Alcohol.2005.sorted <- Alcohol.2005 %>%
arrange(-alcohol)
Alcohol.2005.ranked <- Alcohol.2005 %>%
mutate(rang = rank(alcohol))
View(Alcohol.2005.ranked)
Alcohol.2005.ranked <- Alcohol.2005 %>%
mutate(rang = rank(alcohol)) %>%
arrange(rang)
View(Alcohol.2005.ranked)
Alcohol.2005.ranked <- Alcohol.2005 %>%
mutate(rang = rank(-alcohol)) %>%
arrange(rang)
View(Alcohol.2005.ranked)
Alcohol.2005.ranked <- Alcohol.2005 %>%
mutate(rang = rank(-alcohol)) %>%
arrange(rang) %>%
filter(country == "Germany")
View(Alcohol.2005.ranked)
Alcohol.2008 <- Alcohol %>%
filter(year == '2008') %>%
mutate(rang = rank(-alcohol)) %>%
arrange(rang) %>%
filter(country == "Germany")
Alcohol.2008.ranked <- Alcohol %>%
filter(year == '2008') %>%
mutate(rang = rank(-alcohol)) %>%
arrange(rang) %>%
filter(country == "Germany")
View(Alcohol.2008.ranked)
help("Alcohol")
View(Alcohol)
Alcohol.2005.2008 <- Alcohol %>%
filter(year == '2005',
year == '2008')
View(Alcohol.2005.2008)
Alcohol.2005.2008 <- Alcohol %>%
filter(year == '2005' | year == '2008')
Alcohol.2005.2008.grouped <- Alcohol.2005.2008 %>%
group_by(year) %>%
mutate(rang = rank(-alcohol)) %>%
arrange(rang) %>%
filter(country == "Germany")
Alcohol.2005.2008.grouped
Alcohol.2005.2008.grouped <- Alcohol.2005.2008 %>%
#group_by(year) %>%
mutate(rang = rank(-alcohol)) %>%
arrange(rang) %>%
filter(country == "Germany")
Alcohol.2005.2008.grouped
View(Alcohol.2005.2008.grouped)
Alcohol.2005.2008.grouped <- Alcohol.2005.2008 %>%
#group_by(year) %>%
mutate(rang = rank(-alcohol)) %>%
arrange(rang)
View(Alcohol.2005.2008.grouped)
Alcohol.2005.2008.grouped <- Alcohol.2005.2008 %>%
group_by(year) %>%
mutate(rang = rank(-alcohol)) %>%
arrange(rang)
Alcohol.2005.2008.grouped <- Alcohol.2005.2008 %>%
group_by(year) %>%
mutate(rang = rank(-alcohol)) %>%
arrange(rang) %>%
filter(country == "Germany")
Alcohol.2005.2008.grouped
getwd()
library(mosaic)
data <- read.csv2("Daten_Allbus/allbus.csv")
data_subset <- data %>%
select(respid,
yborn,
age,
ep03,
ep04)
inspect(data_subset)
View(data_subset)
resample(button_action, size=1, prob=c(0.03, 0.97))
button_action <- factor(c("click", "no_click"))
library(mosaic)
resample(button_action, size=1, prob=c(0.03, 0.97))
var1_num_visits <- 43123
var2_num_visits <- 41627
clicks_variant1 <- resample(button_action, size=var1_num_visits, prob=c(0.033, 0.967))
clicks_variant2 <- resample(button_action, size=var2_num_visits, prob=c(0.042, 0.958))
clicks_variant1
tally(clicks_variant1)
tally(clicks_variant1, format = "proportion")
tally(clicks_variant2, format = "proportion")
clicks_variant1_null <- do(10000)*tally(~resample(button_action, size=var1_num_visits, prob=c(0.033, 0.967), format = "proportion")
tally(clicks_variant1, format = "proportion")
tally(clicks_variant2, format = "proportion")
dataset <- clicks_variant1 %>%
bind_rows(clicks_variant2)
clicks_variant1_null <- do(10000)*tally(~resample(button_action, size=var1_num_visits, prob=c(0.033, 0.967)), format = "proportion")
tally(~resample(button_action, size=var1_num_visits, prob=c(0.033, 0.967)), format = "proportion")
tally(resample(button_action, size=var1_num_visits, prob=c(0.033, 0.967)), format = "proportion")
clicks_variant1_null <- do(10000)*tally(resample(button_action, size=var1_num_visits, prob=c(0.033, 0.967)), format = "proportion")
histogram(~click, data = clicks_variant1_null)
0.005/0.033
View(clicks_variant1_null)
tmp_view <- as.data.frame(clicks_variant1)
View(tmp_view)
dataset <- data.frame(button_action = clicks_variant1, variant = c("Variant 1"))
View(dataset)
dataset <- data.frame(button_action = clicks_variant1, variant = c("Variant 1")) %>%
bind_rows(data.frame(button_action = clicks_variant2, variant = c("Variant 2")))
View(dataset)
help(shuffle)
x = seq(1,10,1)
x
shuffle(x)
dataset_shuffled <- shuffle(dataset)
View(dataset_shuffled)
dataset_shuffled %>% group_by(variant) %>% summarise(prop = prop(~click, data = .))
dataset_shuffled %>% group_by(variant) %>% summarise(prop = sum(button_action=="click")/n())
# Laden der Umgebung
library(mosaic)
# To click or not to click
button_action <- factor(c("click", "no_click"))
# Number of visitors for each variant
var1_num_visits <- 43123
var2_num_visits <- 41627
# Simulate clicks for variant1
set.seed(1234)
clicks_variant1 <- resample(button_action, size=var1_num_visits, prob=c(0.033, 0.967))
tally(clicks_variant1, format = "proportion")
# Simulate clicks for variant2
set.seed(1234)
clicks_variant2 <- resample(button_action, size=var2_num_visits, prob=c(0.038, 0.962))
tally(clicks_variant2, format = "proportion")
# Check sampling variation of variant 1 and adjust probabilities so that there is a difference detectable
clicks_variant1_null <- do(10000)*tally(resample(button_action, size=var1_num_visits, prob=c(0.033, 0.967)), format = "proportion")
histogram(~click, data = clicks_variant1_null)
# Put all observations in one dataframe
dataset <- data.frame(button_action = clicks_variant1, variant = c("Variant 1")) %>%
bind_rows(data.frame(button_action = clicks_variant2, variant = c("Variant 2")))
# Shuffle data to simulate random assignment of visitors to variant
dataset_shuffled <- shuffle(dataset)
# Check proportions of variants
dataset_shuffled %>%
group_by(variant) %>%
summarise(prop = sum(button_action=="click")/n())
# To click or not to click
button_action <- factor(c("click", "no_click"))
# Number of visitors for each variant
var1_num_visits <- 43123
var2_num_visits <- 41627
# Simulate clicks for variant1
set.seed(1234)
clicks_variant1 <- resample(button_action, size=var1_num_visits, prob=c(0.05, 0.95))
tally(clicks_variant1, format = "proportion")
# Simulate clicks for variant2
set.seed(1234)
clicks_variant2 <- resample(button_action, size=var2_num_visits, prob=c(0.05, 0.95))
tally(clicks_variant2, format = "proportion")
# Check sampling variation of variant 1 and adjust probabilities so that there is a difference detectable
clicks_variant1_null <- do(10000)*tally(resample(button_action, size=var1_num_visits, prob=c(0.033, 0.967)), format = "proportion")
histogram(~click, data = clicks_variant1_null)
# Put all observations in one dataframe
dataset <- data.frame(button_action = clicks_variant1, variant = c("Variant 1")) %>%
bind_rows(data.frame(button_action = clicks_variant2, variant = c("Variant 2")))
# Shuffle data to simulate random assignment of visitors to variant
dataset_shuffled <- shuffle(dataset)
# Check proportions of variants
dataset_shuffled %>%
group_by(variant) %>%
summarise(prop = sum(button_action=="click")/n())
# Simulate clicks for variant1
set.seed(1234)
clicks_variant1 <- resample(button_action, size=var1_num_visits, prob=c(0.05, 0.95))
tally(clicks_variant1, format = "proportion")
# Simulate clicks for variant2
set.seed(5316)
clicks_variant2 <- resample(button_action, size=var2_num_visits, prob=c(0.05, 0.95))
tally(clicks_variant2, format = "proportion")
# Put all observations in one dataframe
dataset <- data.frame(button_action = clicks_variant1, variant = c("Variant 1")) %>%
bind_rows(data.frame(button_action = clicks_variant2, variant = c("Variant 2")))
# Shuffle data to simulate random assignment of visitors to variant
dataset_shuffled <- shuffle(dataset)
# Check proportions of variants
dataset_shuffled %>%
group_by(variant) %>%
summarise(prop = sum(button_action=="click")/n())
# Simulate clicks for variant1
set.seed(1234)
clicks_variant1 <- resample(button_action, size=var1_num_visits, prob=c(0.049, 0.951))
tally(clicks_variant1, format = "proportion")
# Simulate clicks for variant2
set.seed(5316)
clicks_variant2 <- resample(button_action, size=var2_num_visits, prob=c(0.051, 0.949))
tally(clicks_variant2, format = "proportion")
# Put all observations in one dataframe
dataset <- data.frame(button_action = clicks_variant1, variant = c("Variant 1")) %>%
bind_rows(data.frame(button_action = clicks_variant2, variant = c("Variant 2")))
# Shuffle data to simulate random assignment of visitors to variant
dataset_shuffled <- shuffle(dataset)
# Check proportions of variants
dataset_shuffled %>%
group_by(variant) %>%
summarise(prop = sum(button_action=="click")/n())
clicks_variant1_null <- do(10000)*tally(resample(button_action, size=var1_num_visits, prob=c(0.033, 0.967)), format = "proportion")
histogram(~click, data = clicks_variant1_null)
diffprop(~button_action | variant, data = dataset_shuffled)
diffprop(~button_action | shuffle(variant), data = dataset_shuffled)
prop_diff_null <- do(10000)*diffprop(~button_action | shuffle(variant), data = dataset_shuffled)
View(prop_diff_null)
histogram(~prop_diff_null, data = prop_diff_null)
emp_obs <- diffprop(~button_action | variant, data = dataset_shuffled)
histogram(~prop_diff_null, data = prop_diff_null, v = emp_obs)
help(prop.test)
prop.test(~button_action | variant, data = dataset_shuffled)
histogram(~diffprop, data = prop_diff_null, v = emp_obs)
prop(abs(prop_diff_null$diffprop)>=abs(emp_obs))
p_value_sim <- prop(abs(prop_diff_null$diffprop)>=abs(emp_obs))
# Laden der Umgebung
library(mosaic)
# To click or not to click
button_action <- factor(c("click", "no_click"))
# Number of visitors for each variant
var1_num_visits <- 43123
var2_num_visits <- 41627
# Simulate clicks for variant1
set.seed(1234)
clicks_variant1 <- resample(button_action, size=var1_num_visits, prob=c(0.049, 0.951))
tally(clicks_variant1, format = "proportion")
# Simulate clicks for variant2
set.seed(5316)
clicks_variant2 <- resample(button_action, size=var2_num_visits, prob=c(0.051, 0.949))
tally(clicks_variant2, format = "proportion")
# Put all observations in one dataframe
dataset <- data.frame(button_action = clicks_variant1, variant = c("Variant 1")) %>%
bind_rows(data.frame(button_action = clicks_variant2, variant = c("Variant 2")))
# Shuffle data to simulate random assignment of visitors to variant
dataset_shuffled <- shuffle(dataset)
# Check proportions of variants
dataset_shuffled %>%
group_by(variant) %>%
summarise(prop = sum(button_action=="click")/n())
(0.0496-0.0480)/0.0480
write.csv2(dataset_shuffled, "~/OneDrive - Traum-Ferienwohnungen GmbH/Privat/Sven/FOM/R-Training/Daten_Klickrate_TFW.csv")
help(read.csv)
