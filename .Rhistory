mutate(feature_desc_sign = ifelse(grepl("<=",feature_desc),"kleiner gleich",
ifelse(grepl("<",feature_desc),"groeßer",
ifelse(grepl("=",feature_desc),"ist gleich","not assigned"))),
feature_desc_value = ifelse(feature_desc_sign=="<=", sub(".*<",feature_desc),""))
sub(".*<=",model_explanation_mod2$feature_desc[1])
model_explanation_mod2$feature_desc[1]
sub(".*<=","",model_explanation_mod2$feature_desc[1])
model_explanation_mod2 <- model_explanation_mod %>%
group_by(row_number()) %>%
mutate(feature_desc_sign = ifelse(grepl("<=",feature_desc),"kleiner gleich",
ifelse(grepl("<",feature_desc),"groeßer",
ifelse(grepl("=",feature_desc),"ist gleich","not assigned"))),
feature_desc_value = ifelse(feature_desc_sign=="<=", sub(".*<=","",feature_desc),""))
model_explanation_mod2 <- model_explanation_mod %>%
group_by(row_number()) %>%
mutate(feature_desc_sign = ifelse(grepl("<=",feature_desc),"kleiner gleich",
ifelse(grepl("<",feature_desc),"groeßer",
ifelse(grepl("=",feature_desc),"ist gleich","not assigned"))),
feature_desc_value = ifelse(feature_desc_sign=="kleiner gleich", sub(".*<=","",feature_desc),""))
model_explanation_mod2 <- model_explanation_mod %>%
group_by(row_number()) %>%
mutate(feature_desc_sign = ifelse(grepl("<=",feature_desc),"kleiner gleich",
ifelse(grepl("<",feature_desc),"groeßer",
ifelse(grepl("=",feature_desc),"ist gleich","not assigned"))),
feature_desc_value = ifelse(feature_desc_sign=="kleiner gleich", sub(".*<=","",feature_desc),
ifelse(feature_desc_sign=="groeßer", sub("<.*","",feature_desc),
ifelse(feature_desc_sign=="ist gleich", sub(".*=","",feature_desc),"not assigned"))))
mapping3 <- fread("~/churn/production/bucket_objects_copy/mapping_table.csv")
View(mapping3)
head(mapping)
View(mapping)
help(fread)
mapping <- fread("~/churn/production/bucket_objects_copy/mapping_table.csv", encoding = "UTF-8")
View(mapping)
View(mapping)
head(mapping)
session()
Session()
Sys.info()
Sys.getlocale()
print("Train model...")
# ====================================================
# Get filenames of all test data in bucket copy folder
file_list_test_data <- grep("data_test_", list.files(path = "~/churn/production/bucket_objects_copy",pattern = ".csv"), value = TRUE)
last_file_test_data <- dplyr::last(file_list_test_data)
# Set parameter to last month that is the month which will be predicted
current_month <- sub(".*_", "",sub("[.].*", "", last_file_test_data))
# ====================================================
# ====================================================
data_train <- fread(paste("~/churn/production/bucket_objects_copy/data_train_pred_", current_month ,".csv", sep="" )) %>%
mutate_if(is.character,as.factor)
data_test <- fread(paste("~/churn/production/bucket_objects_copy/data_test_pred_", current_month ,".csv", sep="" )) %>%
mutate_if(is.character,as.factor)
data_train %>% distinct(booking_calender_up_to_date_9mo_cat)
data_train %>% distinct(rating_count_cat)
data_train %>% distinct(inquiry_binding_active_9mo_cat)
data_train %>% distinct(bookings_booked_prop_9mo)
data_train %>% distinct(listing_country_title_int)
data_train %>% distinct(payment_invoice_netto_1p_cat)
data_train %>% distinct(payment_invoice_dx_1p_cat)
# Required packages
suppressMessages(require(data.table))
suppressMessages(require(tidyverse))
suppressMessages(require(lime))
print("Validate explanations and map variables to German...")
# ====================================================
# Get filenames of all test data in bucket copy folder
file_list_test_data <- grep("data_test_", list.files(path = "~/churn/production/bucket_objects_copy",pattern = ".csv"), value = TRUE)
last_file_test_data <- dplyr::last(file_list_test_data)
# Set parameter to last month that is the month which will be predicted
current_month <- sub(".*_", "",sub("[.].*", "", last_file_test_data))
# ====================================================
# ====================================================
# Load model_explanation objet
load(file = paste("~/churn/production/bucket_objects_copy/explainer_object_pred_", current_month ,".RData", sep="" ))
# Load variable mapping
mapping <- fread("~/churn/production/bucket_objects_copy/mapping_table.csv")
# ====================================================
# ====================================================
# Mapping der Variablennamen von englisch auf deutsch
model_explanation_mod <- model_explanation %>%
left_join(mapping %>%
select(variable_name,feature_translation = translation)
, by = c("feature"="variable_name"))
# Replace variable names in feature_desc
model_explanation_mod2 <- model_explanation_mod %>%
group_by(row_number()) %>%
mutate(feature_desc_sign = ifelse(grepl("<=",feature_desc),"kleiner gleich",
ifelse(grepl("<",feature_desc),"groeßer",
ifelse(grepl("=",feature_desc),"ist gleich","not assigned"))),
feature_desc_value = ifelse(feature_desc_sign=="kleiner gleich", sub(".*<=","",feature_desc),
ifelse(feature_desc_sign=="groeßer", sub("<.*","",feature_desc),
ifelse(feature_desc_sign=="ist gleich", sub(".*=","",feature_desc),"not assigned"))))
model_explanation_mod2 %>% filter(feature_translation == "")
tmp_view <- model_explanation_mod2 %>% filter(feature_translation == "")
View(tmp_view)
tmp_view <- model_explanation_mod2 %>% distinct(feature)
View(tmp_view)
tmp_view <- model_explanation_mod2 %>% ungroup() %>% distinct(feature)
View(tmp_view)
tmp_view2 <- model_explanation_mod2 %>% ungroup() %>% filter(feature == payment_had_payed_top_listing)
tmp_view2 <- model_explanation_mod2 %>% ungroup() %>% filter(feature == 'payment_had_payed_top_listing')
View(tmp_view2)
View(tmp_view)
tmp_view2 <- model_explanation_mod2 %>% ungroup() %>% filter(feature == 'inquiry_binding_active_9mo_cat')
View(tmp_view2)
model_explanation <- model_explanation %>%
select(-one_of(drop_cols))
# Required packages
suppressMessages(require(data.table))
suppressMessages(require(tidyverse))
suppressMessages(require(lime))
print("Validate explanations and map variables to German...")
# ====================================================
# Get filenames of all test data in bucket copy folder
file_list_test_data <- grep("data_test_", list.files(path = "~/churn/production/bucket_objects_copy",pattern = ".csv"), value = TRUE)
last_file_test_data <- dplyr::last(file_list_test_data)
# Set parameter to last month that is the month which will be predicted
current_month <- sub(".*_", "",sub("[.].*", "", last_file_test_data))
# ====================================================
# ====================================================
# Load model_explanation objet
load(file = paste("~/churn/production/bucket_objects_copy/explainer_object_pred_", current_month ,".RData", sep="" ))
# Load variable mapping
mapping <- fread("~/churn/production/bucket_objects_copy/mapping_table.csv")
# ====================================================
# ====================================================
# Drop features that are not explainable
drop_cols <- c("performance_cross_feat",
"trend_month")
model_explanation <- model_explanation %>%
select(-one_of(drop_cols))
# ====================================================
# Mapping der Variablennamen von englisch auf deutsch
model_explanation_mod <- model_explanation %>%
left_join(mapping %>%
select(variable_name,feature_translation = translation)
, by = c("feature"="variable_name"))
# Replace variable names in feature_desc
model_explanation_mod2 <- model_explanation_mod %>%
group_by(row_number()) %>%
mutate(feature_desc_sign = ifelse(grepl("<=",feature_desc),"kleiner gleich",
ifelse(grepl("<",feature_desc),"groeßer",
ifelse(grepl("=",feature_desc),"ist gleich","not assigned"))),
feature_desc_value = ifelse(feature_desc_sign=="kleiner gleich", sub(".*<=","",feature_desc),
ifelse(feature_desc_sign=="groeßer", sub("<.*","",feature_desc),
ifelse(feature_desc_sign=="ist gleich", sub(".*=","",feature_desc),"not assigned"))))
model_explanation <- model_explanation %>%
filter(!feature %in% drop_features)
drop_features <- c("performance_cross_feat",
"trend_month")
model_explanation <- model_explanation %>%
filter(!feature %in% drop_features)
model_explanation %>% group_by(case) %>% summarise(n = n())
tmp_view3 <- model_explanation %>% group_by(case) %>% summarise(n = n())
View(tmp_view3)
model_explanation_mod <- model_explanation %>%
left_join(mapping %>%
select(variable_name,feature_translation = translation)
, by = c("feature"="variable_name"))
model_explanation_mod2 <- model_explanation_mod %>%
group_by(row_number()) %>%
mutate(feature_desc_sign = ifelse(grepl("<=",feature_desc),"kleiner gleich",
ifelse(grepl("<",feature_desc),"groeßer",
ifelse(grepl("=",feature_desc),"ist gleich","not assigned"))),
feature_desc_value = ifelse(feature_desc_sign=="kleiner gleich", sub(".*<=","",feature_desc),
ifelse(feature_desc_sign=="groeßer", sub("<.*","",feature_desc),
ifelse(feature_desc_sign=="ist gleich", sub(".*=","",feature_desc),"not assigned"))))
# Required packages
suppressMessages(require(data.table))
suppressMessages(require(tidyverse))
suppressMessages(require(lime))
print("Validate explanations and map variables to German...")
# ====================================================
# Get filenames of all test data in bucket copy folder
file_list_test_data <- grep("data_test_", list.files(path = "~/churn/production/bucket_objects_copy",pattern = ".csv"), value = TRUE)
last_file_test_data <- dplyr::last(file_list_test_data)
# Set parameter to last month that is the month which will be predicted
current_month <- sub(".*_", "",sub("[.].*", "", last_file_test_data))
# ====================================================
# ====================================================
# Load model_explanation objet
load(file = paste("~/churn/production/bucket_objects_copy/explainer_object_pred_", current_month ,".RData", sep="" ))
# Load variable mapping
mapping <- fread("~/churn/production/bucket_objects_copy/mapping_table.csv")
# ====================================================
# ====================================================
# Drop features that are not explainable
drop_features <- c("performance_cross_feat",
"trend_month")
model_explanation <- model_explanation %>%
filter(!feature %in% drop_features)
# ====================================================
# Mapping der Variablennamen von englisch auf deutsch
model_explanation_mod <- model_explanation %>%
left_join(mapping %>%
select(variable_name,feature_translation = translation)
, by = c("feature"="variable_name"))
# Replace variable names in feature_desc
model_explanation_mod2 <- model_explanation_mod %>%
group_by(row_number()) %>%
mutate(feature_desc_sign = ifelse(grepl("<=",feature_desc),"kleiner gleich",
ifelse(grepl("<",feature_desc),"groeßer",
ifelse(grepl("=",feature_desc),"ist gleich","not assigned"))),
feature_desc_value = ifelse(feature_desc_sign=="kleiner gleich", sub(".*<=","",feature_desc),
ifelse(feature_desc_sign=="groeßer", sub("<.*","",feature_desc),
ifelse(feature_desc_sign=="ist gleich", sub(".*=","",feature_desc),"not assigned"))))
# Required packages
suppressMessages(require(data.table))
suppressMessages(require(tidyverse))
suppressMessages(require(lime))
print("Validate explanations and map variables to German...")
# ====================================================
# Get filenames of all test data in bucket copy folder
file_list_test_data <- grep("data_test_", list.files(path = "~/churn/production/bucket_objects_copy",pattern = ".csv"), value = TRUE)
last_file_test_data <- dplyr::last(file_list_test_data)
# Set parameter to last month that is the month which will be predicted
current_month <- sub(".*_", "",sub("[.].*", "", last_file_test_data))
# ====================================================
# ====================================================
# Load model_explanation objet
load(file = paste("~/churn/production/bucket_objects_copy/explainer_object_pred_", current_month ,".RData", sep="" ))
# Load variable mapping
mapping <- fread("~/churn/production/bucket_objects_copy/mapping_table.csv")
# ====================================================
# ====================================================
# Drop features that are not explainable
drop_features <- c("performance_cross_feat",
"trend_month")
model_explanation <- model_explanation %>%
filter(!feature %in% drop_features)
# ====================================================
# Mapping der Variablennamen von englisch auf deutsch
model_explanation_mod <- model_explanation %>%
left_join(mapping %>%
select(variable_name,feature_translation = translation)
, by = c("feature"="variable_name"))
# Replace variable names in feature_desc
model_explanation_mod2 <- model_explanation_mod %>%
group_by(row_number()) %>%
mutate(feature_desc_sign = ifelse(grepl("<=",feature_desc),"kleiner als oder gleich",
ifelse(grepl("<",feature_desc),"größer als",
ifelse(grepl("=",feature_desc),"ist gleich","not assigned"))),
feature_desc_value = ifelse(feature_desc_sign=="kleiner als oder gleich", sub(".*<=","",feature_desc),
ifelse(feature_desc_sign=="größer als", sub("<.*","",feature_desc),
ifelse(feature_desc_sign=="ist gleich", sub(".*=","",feature_desc),"not assigned"))))
# Required packages
suppressMessages(require(data.table))
suppressMessages(require(tidyverse))
suppressMessages(require(lime))
print("Validate explanations and map variables to German...")
# ====================================================
# Get filenames of all test data in bucket copy folder
file_list_test_data <- grep("data_test_", list.files(path = "~/churn/production/bucket_objects_copy",pattern = ".csv"), value = TRUE)
last_file_test_data <- dplyr::last(file_list_test_data)
# Set parameter to last month that is the month which will be predicted
current_month <- sub(".*_", "",sub("[.].*", "", last_file_test_data))
# ====================================================
# ====================================================
# Load model_explanation objet
load(file = paste("~/churn/production/bucket_objects_copy/explainer_object_pred_", current_month ,".RData", sep="" ))
# Load variable mapping
mapping <- fread("~/churn/production/bucket_objects_copy/mapping_table.csv")
# ====================================================
# ====================================================
# Drop features that are not explainable
drop_features <- c("performance_cross_feat",
"trend_month")
model_explanation <- model_explanation %>%
filter(!feature %in% drop_features)
# ====================================================
# Mapping der Variablennamen von englisch auf deutsch
model_explanation_mod <- model_explanation %>%
left_join(mapping %>%
select(variable_name,feature_translation = translation)
, by = c("feature"="variable_name"))
# Replace variable names in feature_desc
model_explanation_mod2 <- model_explanation_mod %>%
group_by(row_number()) %>%
mutate(feature_desc_sign = ifelse(grepl("<=",feature_desc),"kleiner als oder gleich",
ifelse(grepl("<",feature_desc),"größer als",
ifelse(grepl("=",feature_desc),"ist gleich","not assigned"))),
feature_desc_value = ifelse(feature_desc_sign=="kleiner als oder gleich", sub(".*<=","",feature_desc),
ifelse(feature_desc_sign=="größer als", sub("<.*","",feature_desc),
ifelse(feature_desc_sign=="ist gleich", sub(".*=","",feature_desc),"not assigned"))))
help(top_n)
model_explanation_mod3 <- model_explanation_mod2 %>%
group_by(case) %>%
top_n(5, abs(feature_weight))
View(model_explanation_mod3)
model_explanation_mod2 <- model_explanation_mod %>%
group_by(row_number()) %>%
mutate(feature_desc_sign = ifelse(grepl("<=",feature_desc),"kleiner als oder gleich",
ifelse(grepl("<",feature_desc),"größer als",
ifelse(grepl("=",feature_desc),"ist gleich","not assigned"))),
feature_desc_value = ifelse(feature_desc_sign=="kleiner als oder gleich", sub(".*<=","",feature_desc),
ifelse(feature_desc_sign=="größer als", sub("<.*","",feature_desc),
ifelse(feature_desc_sign=="ist gleich", sub(".*=","",feature_desc),"not assigned"))),
feature_desc2 = paste(feature_translation,feature_desc_sign,feature_desc_value, sep="")) %>%
ungroup()
model_explanation_mod3 <- model_explanation_mod2 %>%
group_by(case) %>%
top_n(5, abs(feature_weight))
model_explanation_mod2 <- model_explanation_mod %>%
group_by(row_number()) %>%
mutate(feature_desc_sign = ifelse(grepl("<=",feature_desc),"kleiner als oder gleich",
ifelse(grepl("<",feature_desc),"größer als",
ifelse(grepl("=",feature_desc),"ist gleich","not assigned"))),
feature_desc_value = ifelse(feature_desc_sign=="kleiner als oder gleich", sub(".*<=","",feature_desc),
ifelse(feature_desc_sign=="größer als", sub("<.*","",feature_desc),
ifelse(feature_desc_sign=="ist gleich", sub(".*=","",feature_desc),"not assigned"))),
feature_desc2 = paste(feature_translation,feature_desc_sign,feature_desc_value, sep=" ")) %>%
select(-feature_desc_sign,-feature_desc_value) %>%
ungroup()
model_explanation_mod3 <- model_explanation_mod2 %>%
group_by(case) %>%
top_n(5, abs(feature_weight))
model_explanation_mod2 <- model_explanation_mod %>%
group_by(row_number()) %>%
mutate(feature_desc_sign = ifelse(grepl("<=",feature_desc),"kleiner als oder gleich",
ifelse(grepl("<",feature_desc),"größer als",
ifelse(grepl("=",feature_desc),"ist gleich","not assigned"))),
feature_desc_value = ifelse(feature_desc_sign=="kleiner als oder gleich", sub(".*<=","",feature_desc),
ifelse(feature_desc_sign=="größer als", sub("<.*","",feature_desc),
ifelse(feature_desc_sign=="ist gleich", sub(".*=","",feature_desc),"not assigned"))),
feature_desc2 = paste(feature_translation,feature_desc_sign,feature_desc_value, sep=" ")) %>%
select(-feature_desc_sign,-feature_desc_value, -feature_translation, -`row_number()`) %>%
ungroup()
model_explanation_mod2 <- model_explanation_mod %>%
group_by(row_number()) %>%
mutate(feature_desc_sign = ifelse(grepl("<=",feature_desc),"kleiner als oder gleich",
ifelse(grepl("<",feature_desc),"größer als",
ifelse(grepl("=",feature_desc),"ist gleich","not assigned"))),
feature_desc_value = ifelse(feature_desc_sign=="kleiner als oder gleich", sub(".*<=","",feature_desc),
ifelse(feature_desc_sign=="größer als", sub("<.*","",feature_desc),
ifelse(feature_desc_sign=="ist gleich", sub(".*=","",feature_desc),"not assigned"))),
feature_desc2 = paste(feature_translation,feature_desc_sign,feature_desc_value, sep=" ")) %>%
ungroup() %>%
select(-feature_desc_sign,-feature_desc_value, -feature_translation, -`row_number()`)
model_explanation_mod3 <- model_explanation_mod2 %>%
group_by(case) %>%
top_n(5, abs(feature_weight))
# Pakete laden
library(mosaic)
# Einlesen der Daten
data <- read.csv2("Daten_Allbus/allbus.csv")
# Datensatz ausdünnen
# Interesse nur an den Variablen:
#   - respid (Identifikationsvariable)
#   - yborn  (Geboren am)
#   - age    (Alter)
#   - ep03 (Und Ihre eigene wirtschaftliche Lage heute?)
#   - ep04 (Eine berufstätige Mutter kann ein genauso herzliches und vertrauensvolles Verhältnis zu ihren Kindern finden wie eine Mutter, die nicht berufstätig ist.)
data_subset <- data %>%
select(respid,
yborn,
age,
ep03,
ep04)
# Datensatz Überblick
inspect(data_subset)
setwd("~/OneDrive - Traum-Ferienwohnungen GmbH/Privat/Sven/FOM/R-Training")
# Pakete laden
library(mosaic)
# Workingdirektory setzen
setwd("~/OneDrive - Traum-Ferienwohnungen GmbH/Privat/Sven/FOM/R-Training")
# Einlesen der Daten
data <- read.csv2("Daten_Allbus/allbus.csv")
# Datensatz ausdünnen
# Interesse nur an den Variablen:
#   - respid (Identifikationsvariable)
#   - yborn  (Geboren am)
#   - age    (Alter)
#   - ep03 (Und Ihre eigene wirtschaftliche Lage heute?)
#   - ep04 (Eine berufstätige Mutter kann ein genauso herzliches und vertrauensvolles Verhältnis zu ihren Kindern finden wie eine Mutter, die nicht berufstätig ist.)
data_subset <- data %>%
select(respid,
yborn,
age,
ep03,
ep04)
# Datensatz Überblick
inspect(data_subset)
data_subset <- data_subset %>%
filter(!is.na(yborn))
inspect(data_subset)
data_subset %>% summarise(mean_age= mean(age))
xyplot(age ~ yborn, data = data_subset)
xyplot(ep03 ~ age, data = data_subset)
xyplot(ep04 ~ age, data = data_subset)
# Beispielanalyse Hypothesentest & Modellierung
# Fragestellung: Untersuchen Sie den Zusammenhang der Variablen Rechnungshöhe, Trinkgeld und Geschlecht des tips-Datensatzes.
# Laden der Umgebung
library(mosaic)
# 1. Datensatz downloaden
download.file("https://goo.gl/whKjnl", destfile = "tips.csv")
# 2. Datensatz einlesen
tips <- read.csv2("tips.csv")
# 3. Manipulation von Daten
# -> Nur interessierende Variablen
tips <- tips %>%
select(total_bill, tip, sex)
inspect(tips)
histogram(~ total_bill, data = tips)
histogram(~ tip, data = tips)
xyplot(tip ~ total_bill, data = tips)
bargraph(~ sex, data = tips)
# Pakete laden
library(mosaic)
# Workingdirektory setzen
setwd("~/OneDrive - Traum-Ferienwohnungen GmbH/Privat/Sven/FOM/R-Training")
# Einlesen der Daten
data <- read.csv2("Daten_Allbus/allbus.csv")
# Datensatz ausdünnen
# Interesse nur an den Variablen:
#   - respid (Identifikationsvariable)
#   - yborn  (Geboren am)
#   - age    (Alter)
#   - ep03 (Und Ihre eigene wirtschaftliche Lage heute?)
#   - ep04 (Eine berufstätige Mutter kann ein genauso herzliches und vertrauensvolles Verhältnis zu ihren Kindern finden wie eine Mutter, die nicht berufstätig ist.)
data_subset <- data %>%
select(respid,
yborn,
age,
ep03,
ep04)
# Datensatz Überblick
inspect(data_subset)
data_subset2 <- data_subset %>%
mutate(age_cat = as.factor(age))
inspect(data_subset2)
bargraph(~age_cat, data = data_subset2)
# Beispielanalyse Hypothesentest & Modellierung
# Fragestellung: Untersuchen Sie den Zusammenhang der Variablen Rechnungshöhe, Trinkgeld und Geschlecht des tips-Datensatzes.
# Laden der Umgebung
library(mosaic)
# 1. Datensatz downloaden
download.file("https://goo.gl/whKjnl", destfile = "tips.csv")
# 2. Datensatz einlesen
tips <- read.csv2("tips.csv")
# 3. Manipulation von Daten
# -> Nur interessierende Variablen
tips <- tips %>%
select(total_bill, tip, sex)
inspect(tips)
histogram(~ total_bill, data = tips)
histogram(~ tip, data = tips)
xyplot(tip ~ total_bill, data = tips)
bargraph(~ sex, data = tips)
histogram(~ total_bill | sex, data = tips)
histogram(~ tip | sex, data = tips)
bwplot(tip ~ sex, data = tips)
t.test(~ total_bill | sex, data = tips)
diffprop(~total_bill | sex, data = tips)
tally(diffprop(~total_bill | sex, data = tips), format = "proportion")
diffprop(~total_bill | shuffle(sex), data = tips)
diffprop(~total_bill | shuffle(sex), data = tips)
diffprop(~total_bill | shuffle(sex), data = tips)
help(chuffle)
help(shuffle)
diffprop(~total_bill | shuffle(sex), data = tips)
diffprop(~total_bill | shuffle(sex), data = tips)
diffprop(~total_bill | shuffle(sex), data = tips)
diffprop(~total_bill | shuffle(sex), data = tips)
diffprop(~total_bill | shuffle(sex), data = tips)
diffprop(~total_bill | shuffle(sex), data = tips)
diffprop(~total_bill | shuffle(sex), data = tips)
diffprop(~total_bill | shuffle(sex), data = tips)
diffprop(~total_bill | shuffle(sex), data = tips)
nullvtlg <- do(10000) * diffprop(~total_bill | shuffle(sex), data = tips)
View(nullvtlg)
diffmean(~total_bill | shuffle(sex), data = tips)
diffmean(~total_bill | shuffle(sex), data = tips)
diffmean(~total_bill | shuffle(sex), data = tips)
nullvtlg <- do(10000) * diffmean(~total_bill | shuffle(sex), data = tips)
histogram(~diffmean, data = nullvtlg)
emp_beob <- diffmean(~total_bill | sex, data = tips)
histogram(~diffmean, data = nullvtlg,v = emp_beob)
p_value <- prop(abs(nullvtlg$diffmean)>abs(nullvtlg))
p_value <- prop(abs(nullvtlg$diffmean)>abs(emp_beob))
p_value
t.test(~ tip | sex, data = tips)
cor.test(tip ~ total_bill, data = tips)
reg_res <- lm(tip ~ total_bill, data = tips)
summary(reg_res)
plotModel(reg_res)
reg_res2 <- lm(tip ~ total_bill + sex, data = tips)
summary(reg_res2)
plotModel(reg_res2)
reg_res3 <- lm(tip ~ total_bill + sex + total_bill:sex, data = tips)
summary(reg_res3)
plotModel(reg_res3)
data <- fread("~/OneDrive - Traum-Ferienwohnungen GmbH/Privat/Sven/FOM/R-Training/Daten_Klickrate_TFW.csv)
# Perform classical hypothesis test
prop.test(~button_action | variant, data = data)
# Check sampling variation of variant 1 and adjust probabilities so that there is a difference detectable
prop_diff_null <- do(10000)*diffprop(~button_action | shuffle(variant), data = dataset_shuffled)
emp_obs <- diffprop(~button_action | variant, data = dataset_shuffled)
histogram(~diffprop, data = prop_diff_null, v = emp_obs)
p_value_sim <- prop(abs(prop_diff_null$diffprop)>=abs(emp_obs))
p_value_sim
data <- fread("~/OneDrive - Traum-Ferienwohnungen GmbH/Privat/Sven/FOM/R-Training/Daten_Klickrate_TFW.csv")
# Übung: A/B-Testing bei Traum-Ferienwohnungen
# Laden der Umgebung
library(mosaic)
# Workingdirektory setzen
setwd("~/OneDrive - Traum-Ferienwohnungen GmbH/Privat/Sven/FOM/R-Training")
data <- fread("Daten_Klickrate_TFW.csv")
data <- read.csv("Daten_Klickrate_TFW.csv")
View(data)
data <- read.csv2("Daten_Klickrate_TFW.csv")
View(data)
